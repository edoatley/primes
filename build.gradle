plugins {
	id 'org.springframework.boot' version "$springBootVersion"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'io.freefair.lombok' version '6.1.0-m3'
	id "org.sonarqube" version "3.3"
	id 'info.solidsoft.pitest' version '1.5.1'
	id "me.champeau.jmh" version "0.6.5"
	id "org.owasp.dependencycheck" version "6.2.2"
}

group = 'com.edoatley'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion"
	testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	testImplementation 'io.projectreactor:reactor-test:3.4.9'
	implementation("com.thoughtworks.xstream:xstream:1.4.1")
}

tasks.withType(Test) {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test
	sourceSets sourceSets.main
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
	reports {
		xml.enabled true
		html.enabled true
		xml.destination file("${buildDir}/reports/jacoco/jacoco.xml")
		html.destination file("${buildDir}/reports/jacoco/html")
	}
}

task generateUnitTests(type: Exec) {
    def classToGenerateTestsFor =  'com.edoatley.primes.generator.BruteForcePrimeGenerator'
	def javaClassPath = sourceSets.main.runtimeClasspath.join(':')
	executable './scripts/randoop.sh'
	args = [javaClassPath, classToGenerateTestsFor]
}

pitest {
	threads = 4
	outputFormats = ['XML', 'HTML']
	junit5PluginVersion = '0.12'
	timestampedReports = false
	reportDir=file("${buildDir}/reports/pitest/html")
}

build.dependsOn 'pitest'
test.finalizedBy 'jacocoTestReport'

jmh {
	warmupIterations = 2
	iterations = 5
	fork = 1
}

dependencyCheck {
	cve {
		urlModified = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz"
	}
}

check.dependsOn 'dependencyCheckAnalyze'
check.dependsOn 'jmh'